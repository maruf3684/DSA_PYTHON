ðŸ”¹ Rule of Thumb
	1.	Equality columns first (most selective first)
	2.	Range columns last
	3.	Lexicographic order inside leaf nodes allows efficient range scans


ðŸ”¹ Composite Key Concept
	â€¢	Suppose index is (a, b, c)
	â€¢	Each key in the B+ Tree is a tuple: (a,b,c)
	â€¢	Sorting is lexicographic (dictionary order):

	(a1,b1,c1) < (a1,b1,c2) < (a1,b2,c1) < (a2,b1,c1)

	â€¢	Order of columns in the index determines sorting priority:
	1.	First column (a) â†’ highest priority
	2.	Second column (b) â†’ used to break ties when a is equal
	3.	Third column (c) â†’ used to break ties when a and b are equal



EX:
                        [ (9,9,0) | (10,0,0) ]  Root (Page1)
                         /           |          \
                  Page2 Leaf       Page3 Leaf   Page4 Leaf
          [ (9,8,10) | (9,8,20) ]  [ (9,9,5) ] [ (10,1,1) | (10,2,5) ]



Query: WHERE a=9 AND b=8 AND c BETWEEN 10 AND 20
	1.	Start at Root [ (9,9,0) | (10,0,0) ]
	â€¢	(9,8,?) < (9,9,0) â†’ go ChildPage2 â†’ Page2
	2.	Leaf Page2: [ (9,8,10), (9,8,20) ]
	â€¢	Scan sequentially â†’ pick keys in c BETWEEN 10 AND 20
	â€¢	Collect TIDs â†’ fetch heap rows â†’ (1,9,8,10),(2,9,8,20)


ðŸ”¹ Key Takeaways
	â€¢	B+ Tree stores tuples (a,b,c) in internal nodes and leaf nodes
	â€¢	Sorting is lexicographic â†’ first column is major, second breaks ties, third breaks further ties
	â€¢	Leaf nodes linked â†’ range scans efficient
	â€¢	Internal nodes guide search â†’ always compare tuples lexicographically