

â€¢	Postgres: Table = heap (unordered pages), primary key = separate B+ Tree index â†’ table itself is not index-organized.
â€¢	MySQL InnoDB: Table = clustered B+ Tree organized by primary key â†’ leaf nodes store full row data, table itself = index-oriented.

Ex postgres:

File: users.ibd   (MySQL InnoDB example)
Page size: 16KB
-------------------------------------------
| Page 1 | Page 2 | Page 3 | ...           |
-------------------------------------------

Page 1 (holds rows 1â€“4)
+-----------------------------+
| Row 1: (id=1,  Alice)       |
| Row 2: (id=2,  Bob)         |
| Row 3: (id=3,  Charlie)     |
| Row 4: (id=4,  David)       |
| ... free space ...          |
+-----------------------------+

Page 2 (holds rows 5â€“8)
+-----------------------------+
| Row 5: (id=5,  Emma)        |
| Row 6: (id=6,  Frank)       |
| Row 7: (id=7,  Grace)       |
| Row 8: (id=8,  Henry)       |
| ... free space ...          |
+-----------------------------+

Page 3 (holds rows 9â€“10)
+-----------------------------+
| Row 9:  (id=9,  Ivy)        |
| Row 10: (id=10, Jack)       |
| ... free space ...          |
+-----------------------------+


ðŸ”¹ Key Notes
	â€¢	Each file = contains many pages.
	â€¢	Each page = contains several rows + some free space.
	â€¢	Free space is used for new inserts until the page fills up.
	â€¢	If a row doesnâ€™t fit (big text/blob), DB may store part of it in an overflow page.


ðŸ”¹ Order of Rows in Heap Storage (default table storage)
	â€¢	In heap tables (default in PostgreSQL, MySQL InnoDB, Oracle):
	â€¢	No guaranteed order.
	â€¢	Rows are inserted wherever free space is available inside a page.
	â€¢	If you DELETE a row, the slot may be reused by future inserts.
	â€¢	Thatâ€™s why: SELECT * FROM users : may return rows in any order unless you add ORDER BY.


ðŸ”¹ Example: After Delete + Insert
Suppose we DELETE Row 2 (Bob) and later insert (id=11, Kate):

Page 1
+----------------------------+
| Row 1: (id=1, Alice)       |
| Row 11:(id=11, Kate) <-- reused Bobâ€™s slot
| Row 3: (id=3, Charlie)     |
| Row 4: (id=4, David)       |
+----------------------------+